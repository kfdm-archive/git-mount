#!/usr/bin/env ruby
require 'optparse'
require 'ostruct'
require 'fileutils'

class OptparseMount
  def die message
    puts message
    exit 1
  end
  
  def self.parse(args)
    @options = OpenStruct.new
    @options.branch = 'master'
    @options.repo = `git config --get remote.origin.url`.chomp
    @options.verbose = false
    @options.force = false
  
    @opts = OptionParser.new do |opts|
      opts.banner = "Usage: git-mount [options] local/path"
      
      opts.on("-f", "--force", "Force mount") do |force|
        @options.force = true
      end
      
      opts.on("-v", "--verbose") do |verbose|
        @options.verbose = true
      end
      
      opts.on("-p", "--pages", "Mount GitHub pages") do |pages|
        @options.branch = 'gh-pages'
      end
      
      opts.on("-w", "--wiki", "Mount GitHub wiki") do |wiki|
        @options.repo = @options.repo.gsub /\.git$/, '.wiki.git'
        @options.branch = 'master'
      end
      
      opts.on("-b", "--branch [BRANCH]", "Branch name") do |branch|
        @options.branch = branch
      end
      
      opts.on("-r", "--repo [REPO]", "External Repo") do |repo|
        @options.repo = repo
      end
      
      opts.on("-n", "--dryrun", "Dry Run") do |repo|
        @options.verbose = true
        @options.dryrun = true
      end
      
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
    @opts.parse!(args)
    
    @options.mount = args.shift
    die 'Missing local path' if @options.mount == nil
    
    @options.mount = File.expand_path(@options.mount)
    
    @options
  end
end

options = OptparseMount.parse(ARGV)

if options.verbose
  puts "Command: #{$0}"
  puts "Repo:    #{options.repo}"
  puts "Branch:  #{options.branch}"
  puts "Mount:   #{options.mount}"
  puts
end

# Remove target directory
if options.force and File.exists? options.mount
  puts "Removing old directory #{options.mount}" if options.verbose
  FileUtils::rm_rf(options.mount) if not options.dryrun
end

# Clone branch
command = "git clone --branch #{options.branch} #{options.repo} #{options.mount}"
puts command if options.verbose
`#{command}` if not options.dryrun
